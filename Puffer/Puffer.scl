TYPE PufferUDT
    TITLE   = 'PufferDaten'
    FAMILY  : 'Puffer' 
    AUTHOR  : 'Lopez'
STRUCT
    loaded              : BOOL;       // Gibt an, ob ein Blech geladen wurde (TRUE = geladen)
    loadedDay           : INT;        // Tag, an dem das Blech geladen wurde (1-7 für Montag bis Sonntag)
    loadedTime          : TOD;        // Uhrzeit (Time of Day), zu der das Blech geladen wurde
    loadedExpiredTime   : TIME;       // Verstrichene Zeit seit dem Laden (in Millisekunden)
END_STRUCT
END_TYPE

// ********************************************************************

DATA_BLOCK PufferDB
    TITLE   = 'Pufferplätze'
    FAMILY  : 'Puffer' 
    AUTHOR  : 'Lopez'
STRUCT 
    aktuelleZeit        : DT;         // Aktuelle Zeit im Format DATE_AND_TIME
    Tag                 : INT;        // Aktueller Tag der Woche (1-7 für Montag bis Sonntag)
    Zeit                : TOD;        // Aktuelle Uhrzeit (Time of Day)
    load               : BOOL;        // Eingabebedingung für den Ladeprozess
    unload             : BOOL;        // Eingabebedingung für den Entladeprozess
    loadFlag           : BOOL;        // Zustandsflag für die positive Flanke des Ladeprozesses
    unloadFlag         : BOOL;        // Zustandsflag für die positive Flanke des Entladeprozesses
    reset              : BOOL;        // Eingabebedingung für das Zurücksetzen des Puffers
    Puffer             : ARRAY [1..100] OF PufferUDT;  // Array für 100 Pufferplätze, die Bleche speichern
END_STRUCT

BEGIN
    // Initialisierungen falls nötig
END_DATA_BLOCK

// ********************************************************************

FUNCTION PufferManager : VOID
(*  Diese Funktion verwaltet das Ein- und Ausladen der Bleche im Puffer und berechnet die abgelaufene Zeit für jedes geladene Blech.
    Die Größe des Puffers kann durch die Variable 'PufferSize' flexibel angepasst werden. 
    Hinweis: Passen Sie die Größe des Arrays im Datenbaustein "PufferDB" entsprechend an, um Bereichsfehler zu vermeiden.
*)
VERSION : '0.1'
FAMILY  : 'Puffer'
AUTHOR  : 'Lopez'

VAR_TEMP
    load              : BOOL;            // Temporäre Variable für den Ladeprozess
    unload            : BOOL;            // Temporäre Variable für den Entladeprozess
    ret               : INT;             // Rückgabewert für das Lesen der Systemzeit
    currTime          : DATE_AND_TIME;   // Aktuelle Systemzeit
    timeDiff          : TIME;            // Zeitdifferenz zwischen aktueller Uhrzeit und Ladezeitpunkt
    dayDiff           : INT;             // Differenz der Tage zwischen aktuellem Tag und Lade-Tag
    i                 : INT;             // Schleifenindex für das Durchlaufen der Pufferplätze
    PufferSize        : INT;             // Variable für die flexible Größe des Puffers
END_VAR

BEGIN
    PufferSize := 100; // // Variable für die flexible Größe des Puffers

    // Systemzeit lesen
    ret := READ_CLK(CDT := currTime);        // Liest die aktuelle Systemzeit und speichert sie in currTime
    PufferDB.Tag := DT_DAY(IN := currTime);  // Setzt den aktuellen Tag (1-7) basierend auf currTime
    PufferDB.Zeit := DT_TOD(IN := currTime); // Setzt die aktuelle Tageszeit basierend auf currTime

    // Ladeoperation - positive Flanke
    IF PufferDB.load AND NOT PufferDB.unload AND NOT PufferDB.loadFlag THEN
        load := TRUE;                        // Ladeprozess beginnt, wenn load aktiviert ist und unload nicht aktiv ist
        PufferDB.loadFlag := TRUE;           // Setzt das Zustandsflag, um positive Flanke zu erkennen
    ELSIF NOT PufferDB.load THEN
        PufferDB.loadFlag := FALSE;          // Reset des Zustandsflags, wenn load nicht aktiv ist
        load := FALSE;                       // Beendet den Ladeprozess
    END_IF;

    // Entladeoperation - positive Flanke
    IF PufferDB.unload AND NOT PufferDB.load AND NOT PufferDB.unloadFlag THEN
        unload := TRUE;                      // Entladeprozess beginnt, wenn unload aktiviert ist und load nicht aktiv ist
        PufferDB.unloadFlag := TRUE;         // Setzt das Zustandsflag, um positive Flanke zu erkennen
    ELSIF NOT PufferDB.unload THEN
        PufferDB.unloadFlag := FALSE;        // Reset des Zustandsflags, wenn unload nicht aktiv ist
        unload := FALSE;                     // Beendet den Entladeprozess
    END_IF;
    
    // Laden der Bleche in den Puffer mit Zeitstempel
    IF load AND NOT unload THEN
        FOR i := PufferSize TO 2 BY -1 DO     // Durchläuft alle Pufferplätze vom letzten bis zum zweiten Platz
            PufferDB.Puffer[i].loaded := PufferDB.Puffer[i-1].loaded;              // Schiebt den Ladezustand der Plätze nach oben
            PufferDB.Puffer[i].loadedDay := PufferDB.Puffer[i-1].loadedDay;        // Schiebt das Lade-Datum nach oben
            PufferDB.Puffer[i].loadedTime := PufferDB.Puffer[i-1].loadedTime;      // Schiebt die Lade-Uhrzeit nach oben
        END_FOR;
        PufferDB.Puffer[1].loaded := TRUE;   // Setzt den ersten Pufferplatz auf "geladen"
        PufferDB.Puffer[1].loadedDay := PufferDB.Tag;   // Speichert den aktuellen Tag im ersten Pufferplatz
        PufferDB.Puffer[1].loadedTime := PufferDB.Zeit; // Speichert die aktuelle Tageszeit im ersten Pufferplatz
        load := FALSE;                       // Ladeprozess beenden
    // Entladen der Bleche aus dem Puffer
    ELSIF unload AND NOT load THEN
        FOR i := 1 TO PufferSize - 1 DO       // Durchläuft alle Pufferplätze vom ersten bis zum vorletzten Platz
            PufferDB.Puffer[i].loaded := PufferDB.Puffer[i+1].loaded;              // Schiebt den Ladezustand der Plätze nach unten
            PufferDB.Puffer[i].loadedDay := PufferDB.Puffer[i+1].loadedDay;        // Schiebt das Lade-Datum nach unten
            PufferDB.Puffer[i].loadedTime := PufferDB.Puffer[i+1].loadedTime;      // Schiebt die Lade-Uhrzeit nach unten
        END_FOR;
        PufferDB.Puffer[PufferSize].loaded := FALSE;   // Setzt den letzten Pufferplatz auf "nicht geladen"
        PufferDB.Puffer[PufferSize].loadedDay := PufferDB.Tag;   // Speichert den aktuellen Tag im letzten Pufferplatz
        PufferDB.Puffer[PufferSize].loadedTime := PufferDB.Zeit; // Speichert die aktuelle Tageszeit im letzten Pufferplatz
        unload := FALSE;                      // Entladeprozess beenden
    END_IF;
    
    // Berechnung der `loadedExpiredTime` für jeden Pufferplatz
    FOR i := 1 TO PufferSize DO
        IF PufferDB.Puffer[i].loaded THEN
            // Berechne die Differenz der Tage (1 bis 7)
            IF PufferDB.Tag >= PufferDB.Puffer[i].loadedDay THEN
                dayDiff := PufferDB.Tag - PufferDB.Puffer[i].loadedDay;            // Tage-Differenz innerhalb derselben Woche
            ELSE
                dayDiff := (7 - PufferDB.Puffer[i].loadedDay) + PufferDB.Tag;      // Tage-Differenz, wenn Woche überschritten
            END_IF;
    
            // Berechne die Zeitdifferenz zwischen der aktuellen Zeit und der geladenen Zeit
            IF PufferDB.Zeit >= PufferDB.Puffer[i].loadedTime THEN
                timeDiff := PufferDB.Zeit - PufferDB.Puffer[i].loadedTime;         // Berechnet die Zeitdifferenz am selben Tag
            ELSE
                timeDiff := (T#86400000ms - (PufferDB.Puffer[i].loadedTime - PufferDB.Zeit));  // Über Mitternacht hinaus
                dayDiff := dayDiff - 1;                                            // Korrigiere die Tage-Differenz, wenn Mitternacht überschritten wurde
            END_IF;
    
            // Begrenze die `loadedExpiredTime` auf maximal 24 Stunden
            IF dayDiff > 0 THEN
                PufferDB.Puffer[i].loadedExpiredTime := T#86400000ms;  // Setze auf 24 Stunden, wenn die Differenz größer als 1 Tag ist
            ELSE
                PufferDB.Puffer[i].loadedExpiredTime := timeDiff;      // Speichert die tatsächliche Zeitdifferenz
            END_IF;
        ELSE
            // Wenn der Platz nicht geladen ist, setze die abgelaufene Zeit auf 0
            PufferDB.Puffer[i].loadedExpiredTime := T#0ms;
        END_IF;
    END_FOR;

    // Puffer Resetten
    IF PufferDB.reset THEN
        FOR i := 1 TO PufferSize DO           // Durchläuft alle Pufferplätze, um sie zurückzusetzen
            PufferDB.Puffer[i].loaded := FALSE;         // Setzt den Ladezustand auf "nicht geladen"
            PufferDB.Puffer[i].loadedDay := PufferDB.Tag;   // Setzt das Lade-Datum auf den aktuellen Tag
            PufferDB.Puffer[i].loadedTime := PufferDB.Zeit; // Setzt die Lade-Uhrzeit auf die aktuelle Zeit
            PufferDB.Puffer[i].loadedExpiredTime := T#0ms;  // Setzt die abgelaufene Zeit auf 0
        END_FOR;
        PufferDB.reset := FALSE;               // Setzt den Reset-Eingang zurück
    END_IF;

END_FUNCTION

